/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

 Permission is hereby granted, free of charge, to any person or organization
 obtaining a copy of the software and accompanying documentation covered by
 this license (the "Software") to use, reproduce, display, distribute,
 execute, and transmit the Software, and to prepare derivative works of the
 Software, and to permit third-parties to whom the Software is furnished to
 do so.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
  
 
  ==============================================================================
*/

#ifndef __PLUGINPROCESSOR_H_53E8DE0C__
#define __PLUGINPROCESSOR_H_53E8DE0C__

#include "../JuceLibraryCode/JuceHeader.h"
#include "../JuceLibraryCode/JucePluginCharacteristics.h"
#include "OwnedCFRef.h"

#if STANDALONE_VERSION
#include "PDSubprocessInternal.h"
#endif

//==============================================================================
/**
*/

#include <vector>
using std::vector;

class JucePdAudioProcessor;

class PDProcessConnection : public InterprocessConnection
{
public:
    void SetProcessor(JucePdAudioProcessor* proc) {fProc = proc;}
    
    virtual void 	connectionMade ()
    {
        printf("Host connected\n");
    }
    
    virtual void 	connectionLost ()
    {
        printf("Host lost connection.\n");
    }
    
    virtual void 	messageReceived (const MemoryBlock &message);
    
private:
    JucePdAudioProcessor* fProc;
};


class JucePdAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    JucePdAudioProcessor();
    ~JucePdAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock);
    void releaseResources();

    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages);

    //==============================================================================
    AudioProcessorEditor* createEditor();
    bool hasEditor() const;

    //==============================================================================
    const String getName() const;

    int getNumParameters();

    float getParameter (int index);
    void setParameter (int index, float newValue);

    const String getParameterName (int index);
    const String getParameterText (int index);

    const String getInputChannelName (int channelIndex) const;
    const String getOutputChannelName (int channelIndex) const;
    bool isInputChannelStereoPair (int index) const;
    bool isOutputChannelStereoPair (int index) const;

    bool acceptsMidi() const;
    bool producesMidi() const;

    //==============================================================================
    int getNumPrograms();
    int getCurrentProgram();
    void setCurrentProgram (int index);
    const String getProgramName (int index);
    void changeProgramName (int index, const String& newName);

    //==============================================================================
    void getStateInformation (MemoryBlock& destData);
    void setStateInformation (const void* data, int sizeInBytes);

    // so called-super listeners get notified more often, and in addition get sent all parameters as chang messages when they 
    // are added.
    void    addSuperListener(AudioProcessorListener* listener);
    void    removeSuperListener(AudioProcessorListener* listener);
    
    void receiveMessage(const MemoryBlock& message);
private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (JucePdAudioProcessor);
    
    auto_array<float> fOutBuff;
    size_t fOutBuffSize; // in samples.
    int fBufferSkip;
    auto_array<float> fParams;
    bool fReceivedBuffer;

#if STANDALONE_VERSION
    PDSubprocessor fSubproc;
#else
    PDProcessConnection fConnection;
    CriticalSection fIPCBufferLock;
#endif
    Thread* fNotifyThread;
    vector<AudioProcessorListener*> fSuperListeners;
};

#endif  // __PLUGINPROCESSOR_H_53E8DE0C__
